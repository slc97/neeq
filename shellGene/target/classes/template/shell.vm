## åŒ…
###if (!$pkg.empty)
package $pkg;
###end

import com.neeq.ubsshell.entity.$entity;
import com.neeq.ubsshell.util.GroupRecordUtil;
import com.neeq.ubsshell.util.RestTemplateUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.shell.Availability;
import org.springframework.shell.standard.ShellComponent;
import org.springframework.shell.standard.ShellMethod;
import org.springframework.shell.standard.ShellMethodAvailability;

import java.util.HashMap;
import java.util.Map;

@ShellComponent
public class $entityShell {
    @Autowired
    private RestTemplateUtil restTemplateUtil;


#foreach($method in $methods)
    @ShellMethod(${method.methodDoc})
    public String ${method.methodName} (#foreach($param in ${method.params})${param.type} ${param.name}#if ($foreach.hasNext), #end#end) {
        Map<String, Object> params = new HashMap<>();
        #foreach($param in ${method.params})params.put("${param.name}", ${param.name});
        #end

        return restTemplateUtil.${method.requestMethod}("$clsUrl${method.url}", params);
    }

#end

    @ShellMethodAvailability
    public Availability DealShellCheck() {
        return GroupRecordUtil.getGroup().equals("$clsUrl")
                ? Availability.available()
                : Availability.unavailable("no this command");
    }
}

class $CustomEntityConverter<T> implements Converter<String, $entity> {
    @Override
    public $entity convert(String s) {
        return new $entity(s);
    }
}